// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnLineChatClient is the client API for OnLineChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnLineChatClient interface {
	SayHi(ctx context.Context, opts ...grpc.CallOption) (OnLineChat_SayHiClient, error)
}

type onLineChatClient struct {
	cc grpc.ClientConnInterface
}

func NewOnLineChatClient(cc grpc.ClientConnInterface) OnLineChatClient {
	return &onLineChatClient{cc}
}

func (c *onLineChatClient) SayHi(ctx context.Context, opts ...grpc.CallOption) (OnLineChat_SayHiClient, error) {
	stream, err := c.cc.NewStream(ctx, &OnLineChat_ServiceDesc.Streams[0], "/chat.OnLineChat/SayHi", opts...)
	if err != nil {
		return nil, err
	}
	x := &onLineChatSayHiClient{stream}
	return x, nil
}

type OnLineChat_SayHiClient interface {
	Send(*HiRequest) error
	Recv() (*HiReply, error)
	grpc.ClientStream
}

type onLineChatSayHiClient struct {
	grpc.ClientStream
}

func (x *onLineChatSayHiClient) Send(m *HiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *onLineChatSayHiClient) Recv() (*HiReply, error) {
	m := new(HiReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnLineChatServer is the server API for OnLineChat service.
// All implementations must embed UnimplementedOnLineChatServer
// for forward compatibility
type OnLineChatServer interface {
	SayHi(OnLineChat_SayHiServer) error
	mustEmbedUnimplementedOnLineChatServer()
}

// UnimplementedOnLineChatServer must be embedded to have forward compatible implementations.
type UnimplementedOnLineChatServer struct {
}

func (UnimplementedOnLineChatServer) SayHi(OnLineChat_SayHiServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedOnLineChatServer) mustEmbedUnimplementedOnLineChatServer() {}

// UnsafeOnLineChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnLineChatServer will
// result in compilation errors.
type UnsafeOnLineChatServer interface {
	mustEmbedUnimplementedOnLineChatServer()
}

func RegisterOnLineChatServer(s grpc.ServiceRegistrar, srv OnLineChatServer) {
	s.RegisterService(&OnLineChat_ServiceDesc, srv)
}

func _OnLineChat_SayHi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OnLineChatServer).SayHi(&onLineChatSayHiServer{stream})
}

type OnLineChat_SayHiServer interface {
	Send(*HiReply) error
	Recv() (*HiRequest, error)
	grpc.ServerStream
}

type onLineChatSayHiServer struct {
	grpc.ServerStream
}

func (x *onLineChatSayHiServer) Send(m *HiReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *onLineChatSayHiServer) Recv() (*HiRequest, error) {
	m := new(HiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnLineChat_ServiceDesc is the grpc.ServiceDesc for OnLineChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnLineChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.OnLineChat",
	HandlerType: (*OnLineChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHi",
			Handler:       _OnLineChat_SayHi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat/chat.proto",
}
